[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/2024/04/retro.html",
    "href": "posts/2024/04/retro.html",
    "title": "Linux Retro",
    "section": "",
    "text": "More and more often I find software overloaded, blown-up too noisy. I often tried to use good old console programs (like alpine mail) but often got stuck at some point because I ran into trouble with authenticating to a service. So I continued using Thunderbird. Or when a account i integrated into the Gnome Desktop told me, that a token was no longer valid…\nSo I’ll try to go back to the roots and\n\ninstall a console-only linux (done!)\nfind E-Mail Programs that work with Microsoft’s outlook.com, google and IMAP4/SMTP. This can also be inside Emacs, (Neo-)vim or anything else. But it should work reliably.\nWeb-Browsing might be difficult. I do prefer text-only browsing, but most of the web is -well, I’d say uncomfortable without a graphical browser.\nI also like LogSeq, which is availble as AppImage.\n\nSo I’ll do startx as in the early days :-)\nWith that in mind I simply did a google search for linux consolse as a daily driver. Wow - there are still many console-fans out there! Here some things I found in no specific order.\n\nI should have a look at tmux and zshell.\nGive Neovim a try. Here’s a video by Josean Martinez on how to make it amazing.\nqutebrowser is a lightweight browser\nnnn a cool filemanager\nNeoMutt and OAuth2\nSolène Rapenne started the The Old Computer Challenge.\nOhio Olarte took the challenge and wrote about it"
  },
  {
    "objectID": "posts/2023/08/1st_pyqt.html",
    "href": "posts/2023/08/1st_pyqt.html",
    "title": "First steps in PyQt6",
    "section": "",
    "text": "It took me some time to get started with PyQt. In case i need it again:\nPyQt-builder==1.15.2\nPyQt6==6.4.2\nPyQt6-Charts==6.5.0\nPyQt6-Charts-Qt6==6.5.2\nPyQt6-DataVisualization==6.5.0\nPyQt6-DataVisualization-Qt6==6.5.2\npyqt6-plugins==6.4.2.2.3\nPyQt6-Qt6==6.4.3\nPyQt6-sip==13.5.2\npyqt6-tools==6.4.2.3.3\nPyQt6-WebEngine==6.5.0\nPyQt6-WebEngine-Qt6==6.5.2\n\nstart the desinger with pyqt6-tools.exe designer\nsave your window in a .ui file\ncreate a .py file from the .ui: pyuic6.exe -o ui_mainwindow.py -x mainwindow.ui\nimport the generated class, subclass it, connect slots, have fun :-)\n\nfrom ui_mainwindow import Ui_MainWindow\n\nclass MainWindow(QMainWindow, Ui_MainWindow):\n    def __init__(self, *args, obj=None, **kwargs):\n        super(MainWindow, self).__init__(*args, **kwargs)\n        self.setupUi(self)\n        self.ApiPushButton.clicked.connect(self.sayHello)\n\n    def sayHello(self):\n        print(\"Hello World\")\n    \nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    mainWindow = MainWindow()\n    mainWindow.show()\n    app.exec()"
  },
  {
    "objectID": "posts/2023/06/Hello, World.html",
    "href": "posts/2023/06/Hello, World.html",
    "title": "First Post",
    "section": "",
    "text": "This is the first post in thins Blog\n\nimport datetime\nprint(datetime.datetime.now())\n\n2023-06-01 13:25:33.273028\n\n\nAbove datetime is now() :-)\nEinstein’s theory of special relatively that expresses the equivalence of mass and energy:\n\\(E = mc^{2}\\)"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "myblog",
    "section": "",
    "text": "First Post\n\n\n\n\n\n\n\n\n\n\n\nHeiko\n\n\n\n\n\n\n\n\n\n\n\n\nLinux Retro\n\n\n\n\n\n\nlinux\n\n\nretro\n\n\nconsole\n\n\n\n\n\n\n\n\n\nApr 24, 2024\n\n\nhstaudt\n\n\n\n\n\n\n\n\n\n\n\n\ncurses and python\n\n\n\n\n\n\nlearning\n\n\ncode\n\n\npython\n\n\n\n\n\n\n\n\n\nAug 16, 2023\n\n\nhstaudt\n\n\n\n\n\n\n\n\n\n\n\n\nFirst steps in PyQt6\n\n\n\n\n\n\nlearning\n\n\ncode\n\n\npython\n\n\n\n\n\n\n\n\n\nAug 3, 2023\n\n\nhstaudt\n\n\n\n\n\n\n\n\n\n\n\n\nUsing dotnet Uri\n\n\n\n\n\n\nlearning\n\n\ncode\n\n\nc#\n\n\n\n\n\n\n\n\n\nJun 11, 2023\n\n\nhstaudt\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJun 1, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nMay 29, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "My name is Heiko and I like doing things on and with computers."
  },
  {
    "objectID": "index.html#hi-there",
    "href": "index.html#hi-there",
    "title": "About",
    "section": "",
    "text": "My name is Heiko and I like doing things on and with computers."
  },
  {
    "objectID": "posts/2023/06/using_uri.html",
    "href": "posts/2023/06/using_uri.html",
    "title": "Using dotnet Uri",
    "section": "",
    "text": "I’m learning C# and to make it more fun and useful, I decided to write a gopher client. It’s still a long way - but you have to start somehow :-)\nIn my first lines of code I wanted to create a Socket that connects to a given server. Well, things are easy if you can make sure that a given URI (gopher://example.com) is reachable and the server is listening on port 70. And if not?\nFirst I tried a lot of error catching by hand, but when browsing the documentation I ran across the Uri-Class, which I found a bit oversized for my purposes but still very useful.\nSo I decided that the user has to start the program with a URI like myclient gopher://example.com.\nThis URI goes into CSharp’s args[] array and can be processed:\nif (args.Length != 1)\n{\n    Console.WriteLine(\"Please specify a URL. e.g gopher://example.com:70. The port-number is optional.\");\n    return;\n}\n\n\ntry {\n    host = args[0].ToString();\n    xUri = new Uri(host);\n} catch {\n    Console.WriteLine(\"Invalid URI\");\n    return;\n}\n\nif (xUri.Scheme != \"gopher\")\n{\n    Console.WriteLine($\"Protocol {xUri.Scheme} is not implemented\");\n    return;\n}\n\nif (xUri.Port == -1)\n{\n    Console.WriteLine(\"Port number is not valid\");\n    return;\n}\nIn my Socket-Class the DnsSafe property is used to resolve the IP-Address of the host:\nConsole.Write($\"resolving {host}...\");\ntry{\n    IPHostEntry ipHostInfo =  Dns.GetHostEntry(host);\n    this.ipAddress = ipHostInfo.AddressList[0];\n    Console.WriteLine($\" Got {this.ipAddress}\");\n} catch {\n    Console.WriteLine($\"Error: Could not resolve host {host}.\");\n\n}"
  },
  {
    "objectID": "posts/2023/06/using_uri.html#using-dotnet-uri-class",
    "href": "posts/2023/06/using_uri.html#using-dotnet-uri-class",
    "title": "Using dotnet Uri",
    "section": "",
    "text": "I’m learning C# and to make it more fun and useful, I decided to write a gopher client. It’s still a long way - but you have to start somehow :-)\nIn my first lines of code I wanted to create a Socket that connects to a given server. Well, things are easy if you can make sure that a given URI (gopher://example.com) is reachable and the server is listening on port 70. And if not?\nFirst I tried a lot of error catching by hand, but when browsing the documentation I ran across the Uri-Class, which I found a bit oversized for my purposes but still very useful.\nSo I decided that the user has to start the program with a URI like myclient gopher://example.com.\nThis URI goes into CSharp’s args[] array and can be processed:\nif (args.Length != 1)\n{\n    Console.WriteLine(\"Please specify a URL. e.g gopher://example.com:70. The port-number is optional.\");\n    return;\n}\n\n\ntry {\n    host = args[0].ToString();\n    xUri = new Uri(host);\n} catch {\n    Console.WriteLine(\"Invalid URI\");\n    return;\n}\n\nif (xUri.Scheme != \"gopher\")\n{\n    Console.WriteLine($\"Protocol {xUri.Scheme} is not implemented\");\n    return;\n}\n\nif (xUri.Port == -1)\n{\n    Console.WriteLine(\"Port number is not valid\");\n    return;\n}\nIn my Socket-Class the DnsSafe property is used to resolve the IP-Address of the host:\nConsole.Write($\"resolving {host}...\");\ntry{\n    IPHostEntry ipHostInfo =  Dns.GetHostEntry(host);\n    this.ipAddress = ipHostInfo.AddressList[0];\n    Console.WriteLine($\" Got {this.ipAddress}\");\n} catch {\n    Console.WriteLine($\"Error: Could not resolve host {host}.\");\n\n}"
  },
  {
    "objectID": "posts/2023/08/chuck.html",
    "href": "posts/2023/08/chuck.html",
    "title": "curses and python",
    "section": "",
    "text": "While figuring out a way to create curses-based GUIs in Windows-Terminal i found Sean Zicari’s useful talk Use curses, don’t swear. Although I could not get urwid to work without cygwin, the “curses-part” helped me getting started with python’s curses.\nSo I reproduced his Chuck Norris quotes. Some packages he used don’t work under windows either (because of missing fnctl). But anyway: Here is the result:\nimport curses\nfrom urllib.request import Request, urlopen\nfrom simplejson import load\n\n\ndef get_new_joke():\n    try:\n        _data = urlopen(Request('https://api.chucknorris.io/jokes/random', headers={\"User-Agent\": \"\"}))\n        joke_json = load(_data)\n    except Exception as e:\n        return(\"{}\".format(e))\n    return (joke_json['value'])\n\n\nstdscr = curses.initscr()\n\n# Properly initialize the screen\ncurses.noecho()\ncurses.cbreak()\ncurses.curs_set(0)\n\n# Check for and begin color support\nif curses.has_colors():\n    curses.start_color()\n\n# Optionally enable the\n#stdscr.keypad(1)\n\n# Initialize the color combinations we're going to use\ncurses.init_pair(1, curses.COLOR_RED, curses.COLOR_BLACK)\ncurses.init_pair(2, curses.COLOR_GREEN, curses.COLOR_BLACK)\ncurses.init_pair(3, curses.COLOR_BLUE, curses.COLOR_BLACK)\n\n\n# BEGIN PROGRAM\nstdscr.addstr(\"RANDOM QUOTES\", curses.A_REVERSE)\nstdscr.chgat(-1, curses.A_REVERSE)\n\nstdscr.addstr(curses.LINES-1, 0, \"Press 'R' to request a new quote, 'Q' to quit\")\n\n# Change the R to green\nstdscr.chgat(curses.LINES-1,7, 1, curses.A_BOLD | curses.color_pair(2))\n# Change the Q to red\nstdscr.chgat(curses.LINES-1,35, 1, curses.A_BOLD | curses.color_pair(1))\n\n# Set up the window to hold the random quotes\nquote_window = curses.newwin(curses.LINES-2,curses.COLS, 1,0)\n\n# Create a sub-window so as to cleanly display the quote without worrying\n# about overwriting the quote window's borders\nquote_text_window = quote_window.subwin(curses.LINES-6,curses.COLS-4, 3,2)\n\nquote_text_window.addstr(\"Press 'R' to get your first quote!\")\n\n# Draw a border around the main quote window\nquote_window.box()\n\n# Update the internal window data structures\nstdscr.noutrefresh()\nquote_window.noutrefresh()\n\n# Redraw the screen\ncurses.doupdate()\n\n# Create the event loop\nwhile True:\n    c = quote_window.getch()\n\n    if c == ord('r') or c == ord('R'):\n        quote_text_window.clear()\n        quote_text_window.addstr(\"Getting quote...\", curses.color_pair(3))\n        quote_text_window.refresh()\n        quote_text_window.clear()\n        quote_text_window.addstr(get_new_joke())\n\n    elif c == ord('q') or c == ord('Q'):\n        break\n\n    # Refresh the windows from the bottom up\n    stdscr.noutrefresh()\n    quote_window.noutrefresh()\n    quote_text_window.noutrefresh()\n    curses.doupdate()\n\n\n# Restore the terminal settings\ncurses.nocbreak()\n#stdscr.keypad(0)\ncurses.echo()\ncurses.curs_set(1)\n\n\n# Restore the terminal itself to its \"former glory\"\ncurses.endwin()"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  }
]